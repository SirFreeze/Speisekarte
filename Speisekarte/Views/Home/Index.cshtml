@using Speisekarte.Data.Classes;
@using Speisekarte.Data.Enum;
@model Speisekarte.Models.Home.HomeModel
@{
    ViewBag.Title = "Speisekarte";
}
<script>
    var Costs = 0;
    var Items = [];

    $(document).ready(function () {
        RefreshCard();
        FillSlideDotes();
        showSlides(slideIndex);
        Autoscroll();

        $('#pagination-demo').twbsPagination({
            totalPages: @Html.Raw(Math.Ceiling(Model.Menus.Count() / 6f)),
            // the current page that show on start
            startPage: 1,

            // maximum visible pages
            visiblePages: 5,

            initiateStartPageClick: true,

            // template for pagination links
            href: false,

            // variable name in href template for page number
            hrefVariable: '{{number}}',

            // Text labels
            first: 'First',
            prev: 'Previous',
            next: 'Next',
            last: 'Last',

            // carousel-style pagination
            loop: false,

            // callback function
            onPageClick: function (event, page) {
                $('.page-active').removeClass('page-active');
                $('#page' + page).addClass('page-active');
            },

            // pagination Classes
            paginationClass: 'pagination',
            nextClass: 'nextitem',
            prevClass: 'previtem',
            lastClass: 'last',
            firstClass: 'first',
            pageClass: 'page',
            activeClass: 'active',
            disabledClass: 'disabled'

        });

    })

    var slideIndex = 1;

    function Autoscroll() {
        plusSlides(1);
        setTimeout(Autoscroll, 10000);
    }

    // Next/previous controls
    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    // Thumbnail image controls
    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        var dots = document.getElementsByClassName("dot");
        if (n > slides.length) { slideIndex = 1 }
        if (n < 1) { slideIndex = slides.length }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(" active", "");
        }
        slides[slideIndex - 1].style.display = "block";
        dots[slideIndex - 1].className += " active";
    }

    function FillSlideDotes() {
        for (var i = 1; i <= @Model.Menus.Count(); i++) {
            var span = $('<span>').addClass("dot");
            $(span).click(function () { currentSlide(i) });
            $("#slidedots").append(span);
        }
    }

    function AddMenuToCard(name, cost) {
        var item = new Object();
        item.Name = name;
        item.Cost = cost;
        Items.push(item);
        RefreshCard();
    }

    function RefreshCosts() {
        Costs = 0;
        $(Items).each(function (index, item) {
            Costs += item.Cost;
        })
        $("#allCosts").text(Costs);
    }

    function RefreshItems() {
        var table = $("#itemTable");
        $("#itemTable tr").remove();
        $(Items).each(function (index, item) {
            var row = $('<tr>');
            var nameTd = $('<td>').text(item.Name).addClass("carttd");
            var costTd = $('<td>').text(item.Cost + "€").addClass("carttd");
            var removebtn = $('<button>').addClass("btn btn-danger").append($('<span>').addClass("glyphicon glyphicon-remove").css("position", "relative").css("top", "-5px").css("left", "-7px"));
            removebtn.css("height", "20px").css("width", "20px");
            removebtn.click(function () {
                Items.splice(Items.indexOf(item.Name), 1);
                RefreshCard();
            })
            var buttonTd = $('<td>').addClass("carttd").append(removebtn)
            $(row).append(nameTd);
            $(row).append(costTd);
            $(row).append(buttonTd);
            $(table).append(row);
        })
    }

    function RefreshCard() {
        RefreshCosts();
        RefreshItems();
        $("#cartAmount").text(Items.length);
    }


</script>
<style>
    .page {
        display: none;
    }

    .page-active {
        display: block;
    }
</style>
<link href="~/Content/slide.css" rel="stylesheet" />
<script src="~/Scripts/jquery.twbsPagination.js"></script>
<h1>Speisekarte</h1>
<hr />

<!-- Slideshow container -->
<div class="slideshow-container">
    @foreach (NonContextMenu menu in Model.Menus)
    {
        <div class="mySlides fade2">
            <div style="position: relative; left:42%">
                <h2>@menu.Name</h2>
                <p><i>@menu.Description</i></p>
                <p>Vorspeise: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.Appetizer.ToString()).Select(x => x.Name))</p>
                <p>Hauptgang: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.MainCourse.ToString()).Select(x => x.Name))</p>
                <p>Nachspeise: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.Dessert.ToString()).Select(x => x.Name))</p>
                <p>Trinken: @String.Join(", ", menu.Drinks.Select(x => x.Name))</p>
                <input type="button" class="btn btn-success" value="@menu.Cost €" onclick="AddMenuToCard('@menu.Name', @menu.Cost)" />
            </div>
        </div>
    }
    <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
    <a class="next" onclick="plusSlides(1)">&#10095;</a>
</div>
<br>
<div style="text-align:center" id="slidedots">
</div>
<hr />





<div class="container">
    <div class=" page" id="page1">
        @{int i = 1;}
        @foreach (NonContextMenu menu in Model.Menus)
        {
            int page = (int)Math.Ceiling(i / 6f) + 1;
            <div class="col-md-4">
                <h2>@menu.Name</h2>
                <p><i>@menu.Description</i></p>
                <p>Vorspeise: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.Appetizer.ToString()).Select(x => x.Name))</p>
                <p>Hauptgang: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.MainCourse.ToString()).Select(x => x.Name))</p>
                <p>Nachspeise: @String.Join(", ", menu.Meals.Where(x => x.Type == MealType.Dessert.ToString()).Select(x => x.Name))</p>
                <p>Trinken: @String.Join(", ", menu.Drinks.Select(x => x.Name))</p>
                <input type="button" class="btn btn-success" value="@menu.Cost €" onclick="AddMenuToCard('@menu.Name', @menu.Cost)" />
            </div>

            if (i % 6 == 0)
            {
                WriteLiteral("</div>");
                WriteLiteral("<div class='page' id='page" + page + "'>");
            }
            i++;
        }
    </div>

</div>
<div style="width: 100%;"><ul style="margin-bottom:50px" id="pagination-demo" class="pagination-lg pull-right"></ul></div>
<nav class="navbar navbar-default navbar-fixed-bottom">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#example-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Bestellung</a>
        </div>
        <div class="collapse navbar-collapse" id="example-1">
            <ul class="nav navbar-nav">
                <li><a>Gesammtpreis: <span id="allCosts"></span>€</a></li>
                <li>
                    <div class="btn-group dropup">
                        <button id="cartbtn" style="margin-top: 8px" type="button" class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Warenkorb (<span id="cartAmount"></span>)
                        </button>
                        <div class="dropdown-menu" id="itemDropdown" style="width:300px; max-height:300px; overflow-y:auto">
                            <table class="table" id="itemTable">
                                <thead></thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

    </div>
</nav>
